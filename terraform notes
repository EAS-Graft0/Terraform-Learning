creating an azure terraform instance: {
	create provider

	create resource group

	create network

	create subnet

	create ip

	create nsg

	reate nic

	create account

	create vm
}



init, plan, apply


terraform more for the infrastrcutre itself, after that has spun up you can use something like ansible, puppet or chef







terraform needs initializing first

terraform needs a tf file which contains provider with creds and provider specific keys and resource



apply will create a resource based on a resource action which will show on the output

it then tells you what actions happen and the output of them actions

(aws amis must match their type)


terraform destroy, destroys the instance you've created

terraform apply without an arugment is just a shortcut for terraform plan -out file then terraform apply

to be specific do: {
	terraform plan -out myfile
	then terraform apply myfile
}

terraform plan is good to see what changes would be made before you carry out the task

if you want to change the plan you can create a changes.terraform file


terraform vars should be in their own file
	vars should be used to hide secrets and for elements that might change
	using variables will make terraform files reusable 

aws amis are different per region


terraform files should be seperated to keep things modular

credentials for a provider should not be in the repository or working folder but stored somewhere secured and accessed this way too

use variables in file name with string interpolation ${myvar}


seperate files into
	provider.tf which uses variables
	vars.tf which declares our variables
	terraform.tfvars which has values for variables in and is in the git ignore file so that it doesn't get added to repo


in vars.tf you can create objects such as amis, change type to map, to loop over, then depending on the region you pass in it will select a different image


chef is integrated with terraform

to run ansible scripts you run terraform apply and output the ip and then run your ansible playbook on that ip address

file uploads can be use with remote-exec to execute a script on the instance you spin up


use the 'provisioner' tool to upload a file

need source and destination



this is to point to a resource file
provisioner "file" {
	source = "app.conf"
	destination = "/etc/myapp.conf"
	connection {
	user = "${var.instance_username}"
	password = "${var.instance_password}"
	}
} 
provisioner file goes inside resource
this is to point to a resource file


to upload a script
	provisioner "file" {
		source = "script.sh"
		destination = "/opt/script.sh"
		connection {
			user = "{var.instance_username}"
			private_key = "{file(${var.path_to_private_key})}"
		}
	}
to upload a script using ssh keys

to run a script
	provisioner "remote-exec" {
		inline = [
			"chmod +x /opt/script.sh",
			"/opt/scripts.sh arguments"
		]
	}
	first we chmod it to allow it to be run as an executable then we run it
to run a script


if ssh is to be used then use connection